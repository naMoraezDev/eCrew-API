import { z } from "zod";

export const runningMatchListSchema = z.array(
  z.union([
    z.object({
      original_scheduled_at: z.string(),
      videogame_title: z.null(),
      videogame: z.object({
        id: z.number(),
        name: z.string(),
        slug: z.string(),
      }),
      league: z.object({
        id: z.number(),
        image_url: z.string(),
        modified_at: z.string(),
        name: z.string(),
        slug: z.string(),
        url: z.null(),
      }),
      status: z.string(),
      modified_at: z.string(),
      tournament: z.object({
        begin_at: z.string(),
        detailed_stats: z.boolean(),
        end_at: z.string(),
        has_bracket: z.boolean(),
        id: z.number(),
        league_id: z.number(),
        live_supported: z.boolean(),
        modified_at: z.string(),
        name: z.string(),
        prizepool: z.null(),
        serie_id: z.number(),
        slug: z.string(),
        tier: z.string(),
        winner_id: z.null(),
        winner_type: z.string(),
      }),
      scheduled_at: z.string(),
      live: z.object({
        opens_at: z.null(),
        supported: z.boolean(),
        url: z.null(),
      }),
      match_type: z.string(),
      id: z.number(),
      name: z.string(),
      winner_id: z.null(),
      detailed_stats: z.boolean(),
      winner_type: z.string(),
      begin_at: z.string(),
      game_advantage: z.null(),
      end_at: z.null(),
      draw: z.boolean(),
      rescheduled: z.boolean(),
      forfeit: z.boolean(),
      serie: z.object({
        begin_at: z.string(),
        end_at: z.string(),
        full_name: z.string(),
        id: z.number(),
        league_id: z.number(),
        modified_at: z.string(),
        name: z.string(),
        season: z.null(),
        slug: z.string(),
        winner_id: z.null(),
        winner_type: z.string(),
        year: z.number(),
      }),
      streams_list: z.array(
        z.union([
          z.object({
            embed_url: z.string(),
            language: z.string(),
            main: z.boolean(),
            official: z.boolean(),
            raw_url: z.string(),
          }),
          z.object({
            embed_url: z.null(),
            language: z.string(),
            main: z.boolean(),
            official: z.boolean(),
            raw_url: z.string(),
          }),
        ])
      ),
      results: z.array(z.object({ score: z.number(), team_id: z.number() })),
      number_of_games: z.number(),
      games: z.array(
        z.union([
          z.object({
            begin_at: z.string(),
            complete: z.boolean(),
            detailed_stats: z.boolean(),
            end_at: z.string(),
            finished: z.boolean(),
            forfeit: z.boolean(),
            id: z.number(),
            length: z.number(),
            match_id: z.number(),
            position: z.number(),
            status: z.string(),
            winner: z.object({ id: z.number(), type: z.string() }),
            winner_type: z.string(),
          }),
          z.object({
            begin_at: z.string(),
            complete: z.boolean(),
            detailed_stats: z.boolean(),
            end_at: z.null(),
            finished: z.boolean(),
            forfeit: z.boolean(),
            id: z.number(),
            length: z.null(),
            match_id: z.number(),
            position: z.number(),
            status: z.string(),
            winner: z.object({ id: z.null(), type: z.string() }),
            winner_type: z.string(),
          }),
          z.object({
            begin_at: z.null(),
            complete: z.boolean(),
            detailed_stats: z.boolean(),
            end_at: z.null(),
            finished: z.boolean(),
            forfeit: z.boolean(),
            id: z.number(),
            length: z.null(),
            match_id: z.number(),
            position: z.number(),
            status: z.string(),
            winner: z.object({ id: z.null(), type: z.string() }),
            winner_type: z.string(),
          }),
        ])
      ),
      tournament_id: z.number(),
      winner: z.null(),
      slug: z.string(),
      videogame_version: z.object({ current: z.boolean(), name: z.string() }),
      opponents: z.array(
        z.object({
          opponent: z.object({
            acronym: z.string(),
            id: z.number(),
            image_url: z.string(),
            location: z.string(),
            modified_at: z.string(),
            name: z.string(),
            slug: z.string(),
          }),
          type: z.string(),
        })
      ),
      serie_id: z.number(),
      league_id: z.number(),
    }),
    z.object({
      original_scheduled_at: z.string(),
      videogame_title: z.object({
        id: z.number(),
        name: z.string(),
        slug: z.string(),
        videogame_id: z.number(),
      }),
      videogame: z.object({
        id: z.number(),
        name: z.string(),
        slug: z.string(),
      }),
      league: z.object({
        id: z.number(),
        image_url: z.null(),
        modified_at: z.string(),
        name: z.string(),
        slug: z.string(),
        url: z.null(),
      }),
      status: z.string(),
      modified_at: z.string(),
      tournament: z.object({
        begin_at: z.string(),
        detailed_stats: z.boolean(),
        end_at: z.string(),
        has_bracket: z.boolean(),
        id: z.number(),
        league_id: z.number(),
        live_supported: z.boolean(),
        modified_at: z.string(),
        name: z.string(),
        prizepool: z.null(),
        serie_id: z.number(),
        slug: z.string(),
        tier: z.string(),
        winner_id: z.null(),
        winner_type: z.string(),
      }),
      scheduled_at: z.string(),
      live: z.object({
        opens_at: z.null(),
        supported: z.boolean(),
        url: z.null(),
      }),
      match_type: z.string(),
      id: z.number(),
      name: z.string(),
      winner_id: z.null(),
      detailed_stats: z.boolean(),
      winner_type: z.string(),
      begin_at: z.string(),
      game_advantage: z.null(),
      end_at: z.null(),
      draw: z.boolean(),
      rescheduled: z.boolean(),
      forfeit: z.boolean(),
      serie: z.object({
        begin_at: z.string(),
        end_at: z.string(),
        full_name: z.string(),
        id: z.number(),
        league_id: z.number(),
        modified_at: z.string(),
        name: z.string(),
        season: z.null(),
        slug: z.string(),
        winner_id: z.null(),
        winner_type: z.string(),
        year: z.number(),
      }),
      streams_list: z.array(
        z.object({
          embed_url: z.string(),
          language: z.string(),
          main: z.boolean(),
          official: z.boolean(),
          raw_url: z.string(),
        })
      ),
      results: z.array(z.object({ score: z.number(), team_id: z.number() })),
      number_of_games: z.number(),
      games: z.array(
        z.object({
          begin_at: z.string(),
          complete: z.boolean(),
          detailed_stats: z.boolean(),
          end_at: z.null(),
          finished: z.boolean(),
          forfeit: z.boolean(),
          id: z.number(),
          length: z.null(),
          match_id: z.number(),
          position: z.number(),
          status: z.string(),
          winner: z.object({ id: z.null(), type: z.string() }),
          winner_type: z.string(),
        })
      ),
      tournament_id: z.number(),
      winner: z.null(),
      slug: z.string(),
      videogame_version: z.null(),
      opponents: z.array(
        z.object({
          opponent: z.object({
            acronym: z.string(),
            id: z.number(),
            image_url: z.string(),
            location: z.string(),
            modified_at: z.string(),
            name: z.string(),
            slug: z.string(),
          }),
          type: z.string(),
        })
      ),
      serie_id: z.number(),
      league_id: z.number(),
    }),
  ])
);
